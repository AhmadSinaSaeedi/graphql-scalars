(self.webpackChunk_graphql_scalars_website=self.webpackChunk_graphql_scalars_website||[]).push([[265],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return p},kt:function(){return f}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),c=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),f=o,v=m["".concat(i,".").concat(f)]||m[f]||u[f]||a;return t?n.createElement(v,l(l({ref:r},p),{},{components:t})):n.createElement(v,l({ref:r},p))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=m;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var c=2;c<a;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},162:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var n=t(2122),o=t(9756),a=(t(7294),t(3905)),l=["components"],s={id:"apollo-server",title:"Usage with Apollo Server",sidebar_label:"Apollo Server"},i=void 0,c={unversionedId:"usage/apollo-server",id:"usage/apollo-server",isDocsHomePage:!1,title:"Usage with Apollo Server",description:"Usage with Apollo Server",source:"@site/docs/usage/apollo-server.md",sourceDirName:"usage",slug:"/usage/apollo-server",permalink:"/docs/usage/apollo-server",editUrl:"https://github.com/urigo/graphql-scalars/edit/master/website/docs/usage/apollo-server.md",version:"current",frontMatter:{id:"apollo-server",title:"Usage with Apollo Server",sidebar_label:"Apollo Server"},sidebar:"sidebar",previous:{title:"Quick Start",permalink:"/docs/quick-start"},next:{title:"Mocks",permalink:"/docs/usage/mocks"}},p=[{value:"Usage with Apollo Server",id:"usage-with-apollo-server",children:[]}],u={toc:p};function m(e){var r=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"usage-with-apollo-server"},"Usage with Apollo Server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { ApolloServer } from 'apollo-server';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n// import all scalars and resolvers\nimport { typeDefs, resolvers } from 'graphql-scalars';\n// Alternatively, import individual scalars and resolvers\n// import { DateTimeResolver, DateTimeTypeDefinition, ... } from \"graphql-scalars\"\n\nconst server = new ApolloServer({\n  schema: makeExecutableSchema({\n    typeDefs: [\n      // use spread syntax to add scalar definitions to your schema\n      ...typeDefs,\n      // DateTimeTypeDefinition,\n      // ...\n      // ... other type definitions ...\n    ],\n    resolvers: {\n      // use spread syntax to add scalar resolvers to your resolver map\n      ...resolvers,\n      // DateTimeResolver,\n      // ...\n      // ... remainder of resolver map ...\n    },\n  }),\n});\n\nserver.listen().then(({ url }) => {\n  console.log(`\ud83d\ude80 Server ready at ${url}`);\n});\n")))}m.isMDXComponent=!0}}]);