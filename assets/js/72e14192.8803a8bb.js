(self.webpackChunk_graphql_scalars_website=self.webpackChunk_graphql_scalars_website||[]).push([[7239],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,y=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(y,i(i({ref:t},p),{},{components:r})):n.createElement(y,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8615:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l},default:function(){return p}});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),i={id:"quick-start",title:"Quick Start",sidebar_label:"Quick Start"},s={unversionedId:"quick-start",id:"quick-start",isDocsHomePage:!1,title:"Quick Start",description:"Installation",source:"@site/docs/quick-start.md",sourceDirName:".",slug:"/quick-start",permalink:"/docs/quick-start",editUrl:"https://github.com/urigo/graphql-scalars/edit/master/website/docs/quick-start.md",version:"current",sidebar_label:"Quick Start",frontMatter:{id:"quick-start",title:"Quick Start",sidebar_label:"Quick Start"},sidebar:"sidebar",previous:{title:"Introduction",permalink:"/docs/introduction"},next:{title:"Usage with Apollo Server",permalink:"/docs/usage/apollo-server"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Integration to your existing GraphQL Schema",id:"integration-to-your-existing-graphql-schema",children:[{value:"In your SDL type definitions",id:"in-your-sdl-type-definitions",children:[]},{value:"Importing it in your resolver map",id:"importing-it-in-your-resolver-map",children:[]},{value:"Adding to the root resolver map",id:"adding-to-the-root-resolver-map",children:[]},{value:"Using it in your type definitions",id:"using-it-in-your-type-definitions",children:[]}]}],c={toc:l};function p(e){var t=e.components,r=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"To get started with GraphQL Scalars, install the packages as follows"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"npm install --save graphql-scalars")),(0,o.kt)("p",null,"or"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"yarn add graphql-scalars")),(0,o.kt)("h2",{id:"integration-to-your-existing-graphql-schema"},"Integration to your existing GraphQL Schema"),(0,o.kt)("p",null,"GraphQL Scalars is easy to integrate in your existing GraphQL Schema. You need to add a scalar definition to your SDL type definitions and resolvers like below;"),(0,o.kt)("h3",{id:"in-your-sdl-type-definitions"},"In your SDL type definitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"scalar ScalarName\n")),(0,o.kt)("p",null,"You can also import ready-to-use type definitions for scalars like below;"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// or import specific typeDefs only with ES6 Import\nimport { ScalarNameTypeDefinition } from 'graphql-scalars';\n// or import specific typeDefs only with CommonJS\nconst { ScalarNameTypeDefinition } = require('graphql-scalars');\n// or import all typeDefs once with ES6 Import\nimport { typeDefs as scalarTypeDefs } from 'graphql-scalars';\n// or import all typeDefs once with CommonJS\nconst { typeDefs: scalarTypeDefs } = require('graphql-scalars');\n\nconst typeDefs = [\n  ...scalarTypeDefs,\n  // other typeDefs\n];\n// or\nconst typeDefs = [\n  ScalarNameTypeDefinition,\n  // other typeDefs\n];\n")),(0,o.kt)("h3",{id:"importing-it-in-your-resolver-map"},"Importing it in your resolver map"),(0,o.kt)("p",null,"You can either import the specific scalar's resolvers or all of the resolvers once."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// or import specific resolvers only with ES6 Import\nimport { ScalarNameResolver } from 'graphql-scalars';\n// or import specific resolvers only with CommonJS\nconst { ScalarNameResolver } = require('graphql-scalars');\n// or import all resolvers once with ES6 Import\nimport { resolvers as scalarResolvers } from 'graphql-scalars';\n// or import all resolvers once with CommonJS\nconst { resolvers: scalarResolvers } = require('graphql-scalars');\n")),(0,o.kt)("h3",{id:"adding-to-the-root-resolver-map"},"Adding to the root resolver map"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const myResolverMap = {\n  ScalarName: ScalarNameResolver,\n\n  Query: {\n    // more stuff here\n  },\n\n  Mutation: {\n    // more stuff here\n  },\n};\n")),(0,o.kt)("h3",{id:"using-it-in-your-type-definitions"},"Using it in your type definitions"),(0,o.kt)("p",null,"That's it. Now you can use these scalar types in your schema definition like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type Person {\n  birthDate: DateTime\n  ageInYears: PositiveInt\n\n  heightInInches: PositiveFloat\n\n  minimumHourlyRate: NonNegativeFloat\n\n  currentlyActiveProjects: NonNegativeInt\n\n  email: EmailAddress\n  homePage: URL\n\n  phoneNumber: PhoneNumber\n  homePostalCode: PostalCode\n}\n")),(0,o.kt)("p",null,"These scalars can be used just like the base, built-in ones."))}p.isMDXComponent=!0}}]);