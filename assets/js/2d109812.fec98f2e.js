(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{134:function(e,r,t){"use strict";t.d(r,"a",(function(){return u})),t.d(r,"b",(function(){return f}));var n=t(0),o=t.n(n);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),p=function(e){var r=o.a.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},u=function(e){var r=p(e.components);return o.a.createElement(c.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},d=o.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),d=n,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return t?o.a.createElement(f,s(s({ref:r},c),{},{components:t})):o.a.createElement(f,s({ref:r},c))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,l=new Array(a);l[0]=d;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var c=2;c<a;c++)l[c]=t[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},81:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return l})),t.d(r,"metadata",(function(){return s})),t.d(r,"toc",(function(){return i})),t.d(r,"default",(function(){return p}));var n=t(3),o=t(7),a=(t(0),t(134)),l={id:"apollo-server",title:"Usage with Apollo Server",sidebar_label:"Apollo Server"},s={unversionedId:"usage/apollo-server",id:"usage/apollo-server",isDocsHomePage:!1,title:"Usage with Apollo Server",description:"Usage with Apollo Server",source:"@site/docs/usage/apollo-server.md",slug:"/usage/apollo-server",permalink:"/docs/usage/apollo-server",editUrl:"https://github.com/urigo/graphql-scalars/edit/master/website/docs/usage/apollo-server.md",version:"current",sidebar_label:"Apollo Server",sidebar:"sidebar",previous:{title:"Quick Start",permalink:"/docs/getting-started/quick-start"},next:{title:"Using GraphQL Scalars Mocks",permalink:"/docs/usage/mocks"}},i=[{value:"Usage with Apollo Server",id:"usage-with-apollo-server",children:[]}],c={toc:i};function p(e){var r=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},c,t,{components:r,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"usage-with-apollo-server"},"Usage with Apollo Server"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-javascript"},"import { ApolloServer } from 'apollo-server';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n// import all scalars and resolvers\nimport { typeDefs, resolvers } from 'graphql-scalars';\n// Alternatively, import individual scalars and resolvers\n// import { DateTimeResolver, DateTimeTypeDefinition, ... } from \"graphql-scalars\"\n\nconst server = new ApolloServer({\n  schema: makeExecutableSchema({\n    typeDefs: [\n      // use spread syntax to add scalar definitions to your schema\n      ...typeDefs,\n      // DateTimeTypeDefinition,\n      // ...\n      // ... other type definitions ...\n    ],\n    resolvers: {\n      // use spread syntax to add scalar resolvers to your resolver map\n      ...resolvers,\n      // DateTimeResolver,\n      // ...\n      // ... remainder of resolver map ...\n    },\n  }),\n});\n\nserver.listen().then(({ url }) => {\n  console.log(`\ud83d\ude80 Server ready at ${url}`);\n});\n")))}p.isMDXComponent=!0}}]);