(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{76:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return l})),r.d(n,"metadata",(function(){return s})),r.d(n,"toc",(function(){return i})),r.d(n,"default",(function(){return v}));var t=r(3),a=r(7),o=(r(0),r(92)),l={id:"usage",title:"Usage",sidebar_label:"3. Usage"},s={unversionedId:"getting-started/usage",id:"getting-started/usage",isDocsHomePage:!1,title:"Usage",description:"To use these scalars you'll need to add them in two places, your schema and your resolvers map.",source:"@site/docs/getting-started/mocks.md",slug:"/getting-started/usage",permalink:"/docs/getting-started/usage",editUrl:"https://github.com/urigo/graphql-scalars/edit/master/website/docs/getting-started/mocks.md",version:"current",sidebar_label:"3. Usage"},i=[{value:"In your schema",id:"in-your-schema",children:[]},{value:"Importing it in your resolver map",id:"importing-it-in-your-resolver-map",children:[]},{value:"Adding to the root resolver map",id:"adding-to-the-root-resolver-map",children:[]},{value:"NOTE",id:"note",children:[]},{value:"Usage with Apollo Server",id:"usage-with-apollo-server",children:[]}],c={toc:i};function v(e){var n=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},c,r,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"To use these scalars you'll need to add them in two places, your schema and your resolvers map."),Object(o.b)("p",null,"NOTE: The new RegularExpression scalar will be used a little differently and is explained below."),Object(o.b)("h3",{id:"in-your-schema"},"In your schema"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-graphql"},"scalar Date\n\nscalar Time\n\nscalar DateTime\n\nscalar Duration\n\nscalar UtcOffset\n\nscalar LocalDate\n\nscalar LocalTime\n\nscalar LocalEndTime\n\nscalar EmailAddress\n\nscalar NegativeFloat\n\nscalar NegativeInt\n\nscalar NonEmptyString\n\nscalar NonNegativeFloat\n\nscalar NonNegativeInt\n\nscalar NonPositiveFloat\n\nscalar NonPositiveInt\n\nscalar PhoneNumber\n\nscalar PositiveFloat\n\nscalar PositiveInt\n\nscalar PostalCode\n\nscalar UnsignedFloat\n\nscalar UnsignedInt\n\nscalar URL\n\nscalar ObjectID\n\nscalar BigInt\n\nscalar Long\n\nscalar SafeInt\n\nscalar UUID\n\nscalar GUID\n\nscalar HexColorCode\n\nscalar HSL\n\nscalar HSLA\n\nscalar IPv4\n\nscalar IPv6\n\nscalar ISBN\n\nscalar JWT\n\nscalar Latitude\n\nscalar Longitude\n\nscalar MAC\n\nscalar Port\n\nscalar RGB\n\nscalar RGBA\n\nscalar USCurrency\n\nscalar Currency\n\nscalar JSON\n\nscalar JSONObject\n\nscalar Byte\n\nscalar Void\n")),Object(o.b)("h3",{id:"importing-it-in-your-resolver-map"},"Importing it in your resolver map"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import {\n  DateResolver,\n  TimeResolver,\n  DateTimeResolver,\n  DurationResolver,\n  UtcOffsetResolver,\n  LocalDateResolver,\n  LocalTimeResolver,\n  LocalEndTimeResolver,\n  EmailAddressResolver,\n  NegativeFloatResolver,\n  NegativeIntResolver,\n  NonEmptyStringResolver,\n  NonNegativeFloatResolver,\n  NonNegativeIntResolver,\n  NonPositiveFloatResolver,\n  NonPositiveIntResolver,\n  PhoneNumberResolver,\n  PositiveFloatResolver,\n  PositiveIntResolver,\n  PostalCodeResolver,\n  UnsignedFloatResolver,\n  UnsignedIntResolver,\n  URLResolver,\n  BigIntResolver,\n  LongResolver,\n  SafeIntResolver,\n  UUIDResolver,\n  GUIDResolver,\n  HexColorCodeResolver,\n  HSLResolver,\n  HSLAResolver,\n  IPv4Resolver,\n  IPv6Resolver,\n  ISBNResolver,\n  JWTResolver,\n  LatitudeResolver,\n  LongitudeResolver,\n  MACResolver,\n  PortResolver,\n  RGBResolver,\n  RGBAResolver,\n  USCurrencyResolver,\n  CurrencyResolver,\n  JSONResolver,\n  JSONObjectResolver,\n  ObjectIDResolver,\n  ByteResolver,\n  VoidResolver,\n} from 'graphql-scalars';\n")),Object(o.b)("h3",{id:"adding-to-the-root-resolver-map"},"Adding to the root resolver map"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"const myResolverMap = {\n  ObjectID: ObjectIDResolver,\n\n  Date: DateResolver,\n  Time: TimeResolver,\n  DateTime: DateTimeResolver,\n  Duration: DurationResolver,\n  UtcOffset: UtcOffsetResolver,\n  LocalDate: LocalDateResolver,\n  LocalTime: LocalTimeResolver,\n  LocalEndTime: LocalEndTimeResolver,\n\n  NonPositiveInt: NonPositiveIntResolver,\n  PositiveInt: PositiveIntResolver,\n  NonNegativeInt: NonNegativeIntResolver,\n  NegativeInt: NegativeIntResolver,\n  NonPositiveFloat: NonPositiveFloatResolver,\n  PositiveFloat: PositiveFloatResolver,\n  NonNegativeFloat: NonNegativeFloatResolver,\n  NegativeFloat: NegativeFloatResolver,\n  UnsignedFloat: UnsignedFloatResolver,\n  UnsignedInt: UnsignedIntResolver,\n  BigInt: BigIntResolver,\n  Long: LongResolver,\n  SafeInt: SafeIntResolver,\n\n  EmailAddress: EmailAddressResolver,\n  URL: URLResolver,\n  PhoneNumber: PhoneNumberResolver,\n  PostalCode: PostalCodeResolver,\n  NonEmptyString: NonEmptyStringResolver,\n\n  UUID: UUIDResolver,\n  GUID: GUIDResolver,\n\n  HexColorCode: HexColorCodeResolver,\n  HSL: HSLResolver,\n  HSLA: HSLAResolver,\n  RGB: RGBResolver,\n  RGBA: RGBAResolver,\n\n  IPv4: IPv4Resolver,\n  IPv6: IPv6Resolver,\n  MAC: MACResolver,\n  Port: PortResolver,\n\n  ISBN: ISBNResolver,\n\n  JWT: JWTResolver,\n\n  Latitude: LatitudeResolver,\n  Longitude: LongitudeResolver,\n\n  USCurrency: USCurrencyResolver,\n  Currency: CurrencyResolver,\n  JSON: JSONResolver,\n  JSONObject: JSONObjectResolver,\n  Byte: ByteResolver,\n\n  Query: {\n    // more stuff here\n  },\n\n  Mutation: {\n    // more stuff here\n  },\n};\n")),Object(o.b)("h3",{id:"note"},"NOTE"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"NonNegativeFloat and NonNegativeInt are also available under the aliases UnsignedFloat and UnsignedInt, respectively."),Object(o.b)("li",{parentName:"ul"},"BigInt is also available under the alias Long."),Object(o.b)("li",{parentName:"ul"},"UUID is also available under the alias GUID."),Object(o.b)("li",{parentName:"ul"},"Duration is also available under the alias ISO8601Duration.")),Object(o.b)("p",null,"Alternatively, use the default import and ES6's spread operator syntax:"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"import { resolvers } from 'graphql-scalars';")),Object(o.b)("p",null,"Then make sure they're in the root resolver map like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"const myResolverMap = {\n  ...resolvers,\n\n  Query: {\n    // more stuff here\n  },\n\n  Mutation: {\n    // more stuff here\n  },\n};\n")),Object(o.b)("p",null,"That's it. Now you can use these scalar types in your schema definition like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"type Person {\n  birthDate: DateTime\n  ageInYears: PositiveInt\n\n  heightInInches: PositiveFloat\n\n  minimumHourlyRate: NonNegativeFloat\n\n  currentlyActiveProjects: NonNegativeInt\n\n  email: EmailAddress\n  homePage: URL\n\n  phoneNumber: PhoneNumber\n  homePostalCode: PostalCode\n}\n")),Object(o.b)("p",null,"These scalars can be used just like the base, built-in ones."),Object(o.b)("h3",{id:"usage-with-apollo-server"},"Usage with Apollo Server"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"import { ApolloServer } from 'apollo-server';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\n// import all scalars and resolvers\nimport { typeDefs, resolvers } from 'graphql-scalars';\n// Alternatively, import individual scalars and resolvers\n// import { DateTimeResolver, DateTimeTypeDefinition, ... } from \"graphql-scalars\"\n\nconst server = new ApolloServer({\n  schema: makeExecutableSchema({\n    typeDefs: [\n      // use spread syntax to add scalar definitions to your schema\n      ...typeDefs,\n      // DateTimeTypeDefinition,\n      // ...\n      // ... other type definitions ...\n    ],\n    resolvers: {\n      // use spread syntax to add scalar resolvers to your resolver map\n      ...resolvers,\n      // DateTimeResolver,\n      // ...\n      // ... remainder of resolver map ...\n    },\n  }),\n});\n\nserver.listen().then(({ url }) => {\n  console.log(`\ud83d\ude80 Server ready at ${url}`);\n});\n")))}v.isMDXComponent=!0},92:function(e,n,r){"use strict";r.d(n,"a",(function(){return u})),r.d(n,"b",(function(){return m}));var t=r(0),a=r.n(t);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),v=function(e){var n=a.a.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},u=function(e){var n=v(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=v(r),d=t,m=u["".concat(l,".").concat(d)]||u[d]||p[d]||o;return r?a.a.createElement(m,s(s({ref:n},c),{},{components:r})):a.a.createElement(m,s({ref:n},c))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,l=new Array(o);l[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:t,l[1]=s;for(var c=2;c<o;c++)l[c]=r[c];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);